// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model Admin {
  id          String     @id @default(cuid())
  email       String     @unique
  password    String
  fullName    String?
  phoneNumber String?
  role        Role       @default(ADMIN)
}

model User {
  id          String     @id @default(cuid())
  fullName    String 
  email       String     @unique
  password    String
  phoneNumber String?    @unique
  role        Role       @default(USER)
  address     Address?   @relation(name: "userAddress", fields: [addressId], references: [id])
  addressId   String?    @unique
  cart        Cart?
  orders      Order[]
}

model Address {
  id         String      @id @default(cuid())
  street     String
  city       String
  state      String
  zipcode    String
  country    String
  user       User?      @relation(name: "userAddress")
  userId     String     @unique
}

model FoodItem {
  id           String   @id @default(cuid())
  name         String
  description  String
  price        String
  imageUrl     String
  category     String
  cartItems    CartItem[]
  orderItems   OrderItem[]
}

model        Cart {
  id         String    @id @default(cuid())
  userId     String    @unique
  user       User      @relation(fields: [userId], references: [id])
  items      CartItem[]
}

model CartItem {
  id           String    @id @default(cuid())
  cart         Cart      @relation(fields: [cartId], references: [id])
  cartId       String
  foodItem     FoodItem  @relation(fields: [foodItemId], references: [id])
  foodItemId   String
  quantity     Int
}

model Order {
  id          String      @id @default(cuid())
  user        User        @relation(fields: [userId], references: [id])
  userId      String
  items       OrderItem[]
  totalPrice  Decimal
  status      OrderStatus @default(PENDING)
  payment     Payment?
  delivery    Delivery?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model OrderItem {
  id         String       @id  @default(cuid())
  order      Order        @relation(fields: [orderId], references: [id])
  orderId    String
  foodItem   FoodItem     @relation(fields: [foodItemId], references: [id])
  foodItemId String
  quantity   String
  price      Decimal
}

model Payment {
  id            String        @id @default(cuid())
  order         Order         @relation(fields: [orderId], references: [id])
  orderId       String        @unique
  paymentMethod PaymentMethod
  paymentStatus PaymentStatus @default(PENDING)
  transactionId String?
  paidAmount    Decimal
  createdAt     DateTime      @default(now())
}

model             Delivery {
  id              String     @id @default(cuid())
  order           Order      @relation(fields: [orderId], references: [id])
  orderId         String     @unique
  deliveryAddress String
  deliveryStatus  DeliveryStatus @default(PENDING)
  deliveredAt     DateTime?
}


enum OrderStatus {
  PENDING
  CONFIRMED
  PREPARING
  OUT_FOR_DELIVERY
  DELIVERED
  CANCELLED
}

enum PaymentMethod {
  CASH_ON_DELIVERY
  CREDIT_CARD
  DEBIT_CARD
  UPI
  WALLET
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum DeliveryStatus {
  PENDING
  DISPATCHED
  IN_TRANSIT
  DELIVERED
  FAILED
}

enum Role {
  ADMIN 
  USER
}